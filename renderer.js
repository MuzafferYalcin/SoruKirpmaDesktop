const { ipcRenderer } = require('electron');
const flatpickr = require('flatpickr');
const { Turkish } = require("flatpickr/dist/l10n/tr.js");

// --- KonfigÃ¼rasyon ---
const API_BASE_URL = 'http://bcaicpudev.impark.local:1071';
// ---

// HTML ElemanlarÄ±
const randomBtn = document.getElementById('btn-random');
const deepCutBtn = document.getElementById('btn-deepcut');
const previewBtn = document.getElementById('btn-preview');
const bookIdsInput = document.getElementById('book-ids');
const imageCountInput = document.getElementById('image-count');
const resultsArea = document.getElementById('results');
const loaderOverlay = document.getElementById('loader-overlay');
const parentIdsInput = document.getElementById('parent-ids');
const startDateInput = document.getElementById('start-date');
const endDateInput = document.getElementById('end-date');
const getBookIdsBtn = document.getElementById('btn-get-book-ids');

const actionButtons = [randomBtn, deepCutBtn];
let processedKitapIds = [];

// === OLAY DÄ°NLEYÄ°CÄ°LERÄ° ===

deepCutBtn.addEventListener('click', () => handleApiRequest('deepcut'));
randomBtn.addEventListener('click', () => handleApiRequest('random'));

// !!!!!!!!!!! DEÄžÄ°ÅžÄ°KLÄ°K BURADA !!!!!!!!!!!
previewBtn.addEventListener('click', () => {
    // ArtÄ±k `processedKitapIds` deÄŸiÅŸkenine bakmak yerine, doÄŸrudan input alanÄ±nÄ± okuyor.
    const kitapIdsStr = bookIdsInput.value.trim();
    
    if (kitapIdsStr) {
        const kitapIds = kitapIdsStr.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
        
        if (kitapIds.length > 0) {
            // Input'ta geÃ§erli ID varsa, pencereyi bu ID'lerle aÃ§.
            ipcRenderer.send('open-preview-window', kitapIds);
        } else {
            resultsArea.value = "Hata: GirdiÄŸiniz Kitap ID'leri geÃ§erli bir formatta deÄŸil.";
        }
    } else {
        // Input boÅŸsa kullanÄ±cÄ±yÄ± uyar.
        resultsArea.value = "Ã–nizleme yapmak iÃ§in lÃ¼tfen Kitap ID'leri alanÄ±nÄ± doldurun.";
    }
});
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

getBookIdsBtn.addEventListener('click', () => {
    const ustKurumIdsStr = parentIdsInput.value.trim();
    if (!ustKurumIdsStr) {
        resultsArea.value = "LÃ¼tfen Ã¶nce Ãœst Kurum ID'si girin.";
        return;
    }
    const ustKurumIds = ustKurumIdsStr.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
    const startDate = startDateInput.value || null;
    const endDate = endDateInput.value || null;
    ipcRenderer.send('open-selector-window', { ustKurumIds, startDate, endDate });
});

// === ANA Ä°ÅžLEM FONKSÄ°YONU ===
async function handleApiRequest(type) {
    const kitapIdsStr = bookIdsInput.value.trim();
    const ustKurumIdsStr = parentIdsInput.value.trim();
    const startDate = startDateInput.value || null;
    const endDate = endDateInput.value || null;

    if (kitapIdsStr && ustKurumIdsStr) {
        resultsArea.value = 'Hata: LÃ¼tfen sadece Kitap ID\'leri veya sadece Ãœst Kurum ID\'leri girin. Ä°kisi aynÄ± anda kullanÄ±lamaz.';
        return;
    }

    let url, body, endpointType;

    if (ustKurumIdsStr) {
        const ustKurumIds = ustKurumIdsStr.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
        if (ustKurumIds.length === 0) {
            resultsArea.value = 'Hata: GeÃ§erli Ãœst Kurum ID\'leri girin.';
            return;
        }
        endpointType = 'kurum';
        url = `${API_BASE_URL}/deepCutByKurums`;
        body = JSON.stringify({ ustKurumIds, startDate, endDate });
    } else if (kitapIdsStr) {
        const kitapIds = kitapIdsStr.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
        if (kitapIds.length === 0) {
            resultsArea.value = 'Hata: GeÃ§erli Kitap ID\'leri girin.';
            return;
        }
        endpointType = 'kitap';
        if (type === 'random') {
            const countPerKitap = parseInt(imageCountInput.value);
            url = `${API_BASE_URL}/deep_cut/random`;
            body = JSON.stringify({ kitapIds, countPerKitap });
        } else {
            url = `${API_BASE_URL}/deep_cut`;
            body = JSON.stringify({ kitapIds });
        }
    } else {
        resultsArea.value = 'Hata: LÃ¼tfen iÅŸlem yapmak iÃ§in Kitap ID\'leri veya Ãœst Kurum ID\'leri girin.';
        return;
    }

    setUiLockState(true);

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: body
        });
        const data = await response.json();
        
        let logContent = '';
        if (response.ok) {
            if (data.logs && Array.isArray(data.logs)) {
                logContent += "--- Ä°ÅžLEM LOGLARI ---\n";
                data.logs.forEach(log => {
                    logContent += `[${formatDate(log.timestamp)}] [${log.level}] ${log.message}\n`;
                });
            }
            if (data.summary) {
                logContent += "\n--- Ä°ÅžLEM Ã–ZETÄ° ---\n";
                logContent += JSON.stringify(data.summary, null, 2);
            }
            resultsArea.value = logContent;
            
            if(data.status === 'ok') {
                if(endpointType === 'kitap') {
                    processedKitapIds = JSON.parse(body).kitapIds;
                } else {
                    processedKitapIds = []; 
                    logContent += "\n\nNot: Kurum bazlÄ± iÅŸlemlerde Ã¶nizleme Ã¶zelliÄŸi ÅŸu an iÃ§in desteklenmemektedir.";
                }
            }
            const timestamp = new Date().toISOString().replace(/:/g, '-').slice(0, 19);
            const filename = `log-${timestamp}.txt`;
            ipcRenderer.send('save-log-file', { filename, content: logContent });
        } else {
            throw new Error(data.message || 'API\'den hatalÄ± yanÄ±t geldi.');
        }
    } catch (error) {
        resultsArea.value = `Bir hata oluÅŸtu: ${error.message}`;
    } finally {
        setUiLockState(false);
    }
}

// === PENCERELER ARASI Ä°LETÄ°ÅžÄ°M CEVAPLARI ===
ipcRenderer.on('log-file-saved', (event, filePath) => {
    resultsArea.value += `\n\n--- ðŸ’¾ Loglar baÅŸarÄ±yla kaydedildi ---\nDosya Yolu: ${filePath}`;
    resultsArea.scrollTop = resultsArea.scrollHeight;
});

ipcRenderer.on('update-kitap-ids', (event, selectedIds) => {
    bookIdsInput.value = selectedIds.join(', ');
    parentIdsInput.value = '';
    resultsArea.value = `${selectedIds.length} adet kitap ID'si seÃ§ildi ve alana yazÄ±ldÄ±.`;
});

// === YARDIMCI FONKSÄ°YONLAR ===
function setUiLockState(isLocked) {
    if (isLocked) {
        actionButtons.forEach(btn => btn.disabled = true);
        bookIdsInput.disabled = true;
        parentIdsInput.disabled = true;
        imageCountInput.disabled = true;
        startDateInput.disabled = true;
        endDateInput.disabled = true;
        loaderOverlay.classList.remove('hidden');
        resultsArea.value = "Ä°ÅŸlem baÅŸlatÄ±ldÄ±. Bu iÅŸlem kitap/kurum sayÄ±sÄ±na gÃ¶re uzun sÃ¼rebilir. LÃ¼tfen bekleyin ve uygulamayÄ± kapatmayÄ±n...";
    } else {
        actionButtons.forEach(btn => btn.disabled = false);
        bookIdsInput.disabled = false;
        parentIdsInput.disabled = false;
        imageCountInput.disabled = false;
        startDateInput.disabled = false;
        endDateInput.disabled = false;
        loaderOverlay.classList.add('hidden');
    }
}

function formatDate(isoString) {
    const date = new Date(isoString);
    return date.toLocaleString('tr-TR');
}

// === BAÅžLANGIÃ‡ AYARLARI ===
document.addEventListener('DOMContentLoaded', () => {
    randomBtn.disabled = false;
    
    const config = {
        locale: Turkish,
        dateFormat: "Y-m-d",
        altInput: true,
        altFormat: "d.m.Y"
    };
    
    flatpickr(startDateInput, config);
    flatpickr(endDateInput, config);
});